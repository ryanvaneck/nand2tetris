// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */
/*
IN
x[16], y[16],  // 16-bit inputs
zx, // zero the x input?
nx, // negate the x input?
zy, // zero the y input?
ny, // negate the y input?
f,  // compute out = x + y (if 1) or x & y (if 0)
no; // negate the out output?

OUT
out[16], // 16-bit output
zr, // 1 if (out == 0), 0 otherwise
ng; // 1 if (out < 0),  0 otherwise

CHIP PC {
    IN in[16],load,inc,reset;
        OUT out[16];

*/
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
// instruction[0] = i, instruction[1..2] = xx, instruction[3] = a, instruction[4..9] = cccccc, instruction[10..12] == ddd, instructino[13..15] == jjj

/* check i for A-instruction or C-instruction */
Mux16(a=ALUout, b[0]=false, b[1..15]=instruction[1..15], sel=instruction[0], out=ALUoutOrInstruction);

ARegister(in=ALUoutOrInstruction, load=instruction[10], out=Aout, out[1..15]=addressM);
DRegister(in=ALUout, load=instruction[11], out=Dout);

/* send A or RAM[A](aka M) to ALU, a=0 -> send A, a=1 -> send M */
Mux16(a=Aout, b=inM, sel=instruction[3], out=AorM);

ALU(x=Dout, y=AorM, zx=instruction[4], nx=instruction[5], zy=instruction[6], ny=instruction[7], f=instruction[8], no=instruction[9], out=ALUout, zr=ALUoutISzero, ng=ALUoutISneg);

/* write ALUout to M if instruction[12] */
Or(a=false, b=instruction[12], out=writeM);
And16(a[0]=true, a[1]=true, a[2]=true, a[3]=true, a[4]=true, a[5]=true, a[6]=true, a[7]=true, a[8]=true, a[9]=true, a[10]=true, a[11]=true, a[12]=true, a[13]=true, a[14]=true, a[15]=true, b=ALUout, out=outM);

//jump
Not(in=ALUoutISzero, out = notALUoutISzero);  //101
Not(in=ALUoutISneg, out = notALUoutISneg);    //011
And(a=notALUoutISzero, b=notALUoutISneg, out=notANDnot);      //001
Or(a=ALUoutISzero, b=ALUoutISneg, out=zeroORneg); //100
Mux8Way(a=false, b=notANDnot, c=ALUoutISzero, d=notALUoutISneg, e=zeroORneg, f=notALUoutISzero, g=ALUoutISneg, h=true, sel=instruction[13..15], out=jumpOUT);

Not(in=jumpOUT, out=notJUMP);
PC(in=Aout, reset=reset, load=jumpOUT, inc=notJUMP, out[1..15]=pc);



}

/*
a#000 no jump
b#001 out>0 !ALUoutISzero && !ALUoutISneg
c#010 out=0 ALUoutISzero
d#011 out>=0 !ALUoutISneg
e#100 out<=0 ALUoutISzero || ALUoutISneg
f#101 out!=0 !ALUoutISzero
g#110 out<0 ALUoutISneg
h#111 jump














//Mux8Way16(sel=instruction[10..12], in=ALUout, b=toM, c=toD, d=toMD, e=toA, f=toAM, g=toAD, h=toAMD);
