// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */
/*
IN
x[16], y[16],  // 16-bit inputs
zx, // zero the x input?
nx, // negate the x input?
zy, // zero the y input?
ny, // negate the y input?
f,  // compute out = x + y (if 1) or x & y (if 0)
no; // negate the out output?

OUT
out[16], // 16-bit output
zr, // 1 if (out == 0), 0 otherwise
ng; // 1 if (out < 0),  0 otherwise

CHIP PC {
    IN in[16],load,inc,reset;
        OUT out[16];

*/
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
// instruction[15] = i, instruction[13..14] = xx, instruction[12] = a, instruction[6..11] = cccccc, instruction[3..5] == ddd, instructino[0..2] == jjj

/* check i for A-instruction or C-instruction */
Mux16(b=ALUout, a[15]=false, a[0..14]=instruction[0..14], sel=instruction[15], out=ALUoutOrInstruction);

ARegister(in=ALUoutOrInstruction, load=loadA, out=Aout, out[0..14]=addressM);
DRegister(in=ALUout, load=writeD, out=Dout);

/* send A or RAM[A](aka M) to ALU, a=0 -> send A, a=1 -> send M */
And(a=instruction[15], b=instruction[12], out=aANDi);
Mux16(a=Aout, b=inM, sel=aANDi, out=AorM);

ALU(x=Dout, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=ALUoutISzero, ng=ALUoutISneg);

And(a=instruction[15], b=instruction[3], out=writeM, out=selM);
And(a=instruction[15], b=instruction[4], out=writeD);
Not(in=instruction[15], out=notI);
And(a=instruction[15], b=instruction[5], out=writeA);
Or(a=writeA, b=notI, out=loadA);

//jump
Not(in=ALUoutISzero, out=notALUoutISzero);  //101
Not(in=ALUoutISneg, out=notALUoutISneg);    //011
And(a=notALUoutISzero, b=notALUoutISneg, out=notANDnot);      //001
Or(a=ALUoutISzero, b=ALUoutISneg, out=zeroORneg); //100
Mux8Way16(a[0]=false, b[0]=notANDnot, c[0]=ALUoutISzero, d[0]=notALUoutISneg, e[0]=ALUoutISneg, f[0]=notALUoutISzero, g[0]=zeroORneg, h[0]=true, sel=instruction[0..2], out[0]=jumpOUT);

Not(in=jumpOUT, out=notJUMP);
And(a=instruction[15], b=jumpOUT, out=pcLOAD);
Not(in=pcLOAD, out=notPCload);
PC(in=Aout, reset=reset, load=pcLOAD, inc=notPCload, out[0..14]=pc);



}

/*
a#000 no jump
b#001 out>0 !ALUoutISzero && !ALUoutISneg
c#010 out=0 ALUoutISzero
d#011 out>=0 !ALUoutISneg
e#100 out<=0 ALUoutISzero || ALUoutISneg
f#101 out!=0 !ALUoutISzero
g#110 out<0 ALUoutISneg
h#111 jump














//Mux8Way16(sel=instruction[10..12], in=ALUout, b=toM, c=toD, d=toMD, e=toA, f=toAM, g=toAD, h=toAMD);
